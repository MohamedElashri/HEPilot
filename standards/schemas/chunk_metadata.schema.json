{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/MohamedElashri/HEPilot/standards/schemas/chunk_metadata.schema.json",
  "title": "Chunk Metadata",
  "description": "Metadata for individual chunks stored alongside chunk content files. Provides detailed information about chunk characteristics, position within document, and overlap configuration. This metadata enables efficient chunk retrieval, context reconstruction, and quality assessment without loading chunk content.",
  "type": "object",
  "required": [
    "chunk_id",
    "document_id",
    "chunk_index",
    "total_chunks",
    "token_count"
  ],
  "properties": {
    "chunk_id": {
      "type": "string",
      "format": "uuid",
      "description": "Unique identifier for this chunk, matching the chunk_id in the corresponding chunk_output. Used to correlate metadata with chunk content and retrieval results."
    },
    "document_id": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the parent document, enabling quick lookup of all chunks belonging to a document."
    },
    "chunk_index": {
      "type": "integer",
      "description": "Zero-based sequential position of this chunk within the document. Used for ordering and adjacent chunk retrieval."
    },
    "total_chunks": {
      "type": "integer",
      "description": "Total number of chunks in the parent document. Enables percentage-of-document calculations and determines if this is the final chunk."
    },
    "section_hierarchy": {
      "type": "array",
      "items": { "type": "string" },
      "description": "Hierarchical section path from document root to this chunk's location. Array ordered from top-level to immediate parent section. Provides navigational context and enables section-based filtering."
    },
    "token_count": {
      "type": "integer",
      "description": "Total number of tokens in this chunk including any overlap from previous chunk. Used to verify chunk size compliance and estimate embedding costs."
    },
    "character_count": {
      "type": "integer",
      "description": "Total number of Unicode characters in the chunk content. Provides alternative size metric and enables character-based truncation if needed."
    },
    "chunk_type": {
      "type": "string",
      "description": "Primary content type classification. Enables type-specific retrieval strategies and processing. Common values: 'text', 'table', 'equation', 'mixed', 'code', 'list'."
    },
    "contains_equations": {
      "type": "boolean",
      "description": "True if this chunk contains one or more LaTeX equations (inline or display). Used for mathematical content detection and specialized retrieval."
    },
    "contains_tables": {
      "type": "boolean",
      "description": "True if this chunk contains one or more markdown tables. Used for data-oriented content detection and structured extraction."
    },
    "overlap_info": {
      "type": "object",
      "description": "Detailed information about overlap configuration for this chunk. Enables understanding of chunk boundaries and prevents double-processing of overlapping regions.",
      "required": [
        "has_previous_overlap",
        "has_next_overlap",
        "overlap_token_count"
      ],
      "properties": {
        "has_previous_overlap": {
          "type": "boolean",
          "description": "True if this chunk's beginning overlaps with the previous chunk's end. Always false for chunk_index=0."
        },
        "has_next_overlap": {
          "type": "boolean",
          "description": "True if this chunk's end will be included in the next chunk's beginning. Always false for the last chunk (chunk_index = total_chunks - 1)."
        },
        "overlap_token_count": {
          "type": "integer",
          "description": "Number of tokens that overlap with adjacent chunks. For chunks with both previous and next overlap, this represents the overlap size in tokens (typically chunk_size Ã— chunk_overlap)."
        }
      },
      "additionalProperties": false
    },
    "code_chunk_info": {
      "type": "object",
      "description": "Code-specific metadata for chunks from source_type=code_docs or source_type=code. Provides information about the code structure and context. Only present for code source types.",
      "properties": {
        "code_element_type": {
          "type": "string",
          "enum": ["module", "class", "function", "method", "documentation"],
          "description": "Type of code element this chunk represents. 'module' for module-level docstrings, 'class' for class definitions, 'function' for standalone functions, 'method' for class methods, 'documentation' for pure documentation files."
        },
        "element_name": {
          "type": "string",
          "description": "Name of the code element (e.g., 'calculate_momentum', 'Particle', '__init__'). Used for code navigation and search."
        },
        "function_signature": {
          "type": "string",
          "description": "Full function or method signature including parameters and return type (e.g., 'def calculate_momentum(particle: Particle, frame: str) -> Vector:'). Only applicable for functions and methods."
        },
        "parent_class": {
          "type": "string",
          "description": "Name of the containing class for methods. Null for standalone functions. Provides class context for method chunks."
        },
        "imports": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of imports or dependencies referenced in this code chunk (e.g., ['numpy', 'ROOT.TLorentzVector']). Helps understand code dependencies."
        },
        "file_location": {
          "type": "string",
          "description": "File path within the repository for this code chunk (e.g., 'python/LHCb/Kernel/LHCbMath.py'). May differ from document-level file_path for repository-based code documents."
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}
