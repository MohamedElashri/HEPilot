{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/MohamedElashri/HEPilot/standards/schemas/discovery_output.schema.json",
  "title": "Discovery Output",
  "description": "Output from the Discovery Module containing candidate documents found in source repositories. The Discovery Module is responsible for finding candidate documents and returning a registry with metadata that enables prioritization and acquisition planning. Source-specific requirements: arXiv adapters MUST query both REST API and OAI-PMH feed, extract version history and withdrawal notices. Indico adapters MUST traverse event hierarchies and capture speaker metadata. Internal Notes MUST respect repository ACLs and classification flags. TWiki adapters MUST resolve internal links and page histories.",
  "type": "object",
  "required": ["discovered_documents"],
  "properties": {
    "rate_limit_status": {
      "$ref": "rate_limit_status.schema.json",
      "description": "Rate limit status from the source API. MUST be included when the source provides rate limiting information. Used for adaptive throttling and quota management."
    },
    "discovered_documents": {
      "type": "array",
      "description": "Array of discovered document entries. Each entry represents a candidate document found during the discovery phase, with sufficient metadata for acquisition prioritization.",
      "items": {
        "type": "object",
        "required": [
          "document_id",
          "source_type",
          "source_url",
          "title",
          "discovery_timestamp",
          "estimated_size"
        ],
        "properties": {
          "document_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for this document (UUID v4). This ID MUST be consistent across all pipeline stages (discovery, acquisition, processing, chunking) and is used to correlate outputs."
          },
          "source_type": {
            "type": "string",
            "description": "Type of source this document originates from. MUST match one of the supported source types: arxiv, indico, internal_notes, twiki, or other. Determines which source-specific processing rules apply."
          },
          "source_url": {
            "type": "string",
            "format": "uri",
            "description": "Original URL where the document can be accessed. MUST be a valid, absolute URI. This is used by the Acquisition Module to download the document and serves as provenance information."
          },
          "title": {
            "type": "string",
            "description": "Document title as provided by the source. SHOULD be the official title without modifications. Used for cataloging and human-readable identification."
          },
          "authors": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of document authors in order. Optional field that SHOULD be included when available from the source. Each string represents one author name."
          },
          "discovery_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when this document was discovered. Used for tracking discovery freshness and managing incremental discovery workflows."
          },
          "estimated_size": {
            "type": "integer",
            "description": "Estimated document size in bytes. Used for download planning, quota management, and resource allocation. When exact size is unknown, SHOULD provide conservative estimate."
          },
          "content_type": {
            "type": "string",
            "description": "MIME type or file format of the document (e.g., 'application/pdf', 'application/x-latex', 'text/html'). Used to select appropriate processor for the document."
          },
          "priority_score": {
            "type": "number",
            "description": "Optional relevance or priority score for this document. Higher scores indicate higher priority for acquisition. Scoring algorithm is implementation-specific but SHOULD consider factors like recency, citation count, or relevance to query criteria."
          }
        },
        "additionalProperties": false
      }
    }
  },
  "additionalProperties": false
}
